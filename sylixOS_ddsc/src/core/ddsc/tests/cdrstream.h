#define CU_TheoryDataPointsSize_ddsc_cdrstream_ser_des(datapoints) ( datapoints.descr.n )
#define CU_TheoryDataPointsSlice_ddsc_cdrstream_ser_des(datapoints, index) ( datapoints.descr.p[index], datapoints.desc.p[index], datapoints.sample_empty_fn.p[index], datapoints.sample_init_fn.p[index], datapoints.keys_equal_fn.p[index], datapoints.sample_equal_fn.p[index], datapoints.sample_free_fn.p[index] )
#define CU_TheoryDataPointsTypedef_ddsc_cdrstream_ser_des() { struct { size_t n; const char * *p; } descr; struct { size_t n; const dds_topic_descriptor_t * *p; } desc; struct { size_t n; sample_empty *p; } sample_empty_fn; struct { size_t n; sample_init *p; } sample_init_fn; struct { size_t n; keys_equal *p; } keys_equal_fn; struct { size_t n; sample_equal *p; } sample_equal_fn; struct { size_t n; sample_free *p; } sample_free_fn; }
#define CU_TheoryDataPointsSize_ddsc_cdrstream_ser_des_multiple(datapoints) ( datapoints.descr.n )
#define CU_TheoryDataPointsSlice_ddsc_cdrstream_ser_des_multiple(datapoints, index) ( datapoints.descr.p[index], datapoints.desc.p[index], datapoints.sample_init_fn.p[index], datapoints.sample_equal_fn.p[index], datapoints.sample_free_fn.p[index] )
#define CU_TheoryDataPointsTypedef_ddsc_cdrstream_ser_des_multiple() { struct { size_t n; const char * *p; } descr; struct { size_t n; const dds_topic_descriptor_t * *p; } desc; struct { size_t n; sample_init *p; } sample_init_fn; struct { size_t n; sample_equal *p; } sample_equal_fn; struct { size_t n; sample_free *p; } sample_free_fn; }
#define CU_TheoryDataPointsSize_ddsc_cdrstream_appendable_mutable(datapoints) ( datapoints.descr.n )
#define CU_TheoryDataPointsSlice_ddsc_cdrstream_appendable_mutable(datapoints, index) ( datapoints.descr.p[index], datapoints.desc1.p[index], datapoints.desc2.p[index], datapoints.sample_init_fn1.p[index], datapoints.sample_init_fn2.p[index], datapoints.sample_equal_fn1.p[index], datapoints.sample_equal_fn2.p[index], datapoints.sample_free_fn1.p[index], datapoints.sample_free_fn2.p[index] )
#define CU_TheoryDataPointsTypedef_ddsc_cdrstream_appendable_mutable() { struct { size_t n; const char * *p; } descr; struct { size_t n; const dds_topic_descriptor_t * *p; } desc1; struct { size_t n; const dds_topic_descriptor_t * *p; } desc2; struct { size_t n; sample_init *p; } sample_init_fn1; struct { size_t n; sample_init *p; } sample_init_fn2; struct { size_t n; sample_equal *p; } sample_equal_fn1; struct { size_t n; sample_equal *p; } sample_equal_fn2; struct { size_t n; sample_free2 *p; } sample_free_fn1; struct { size_t n; sample_free2 *p; } sample_free_fn2; }
#define CU_TheoryDataPointsSize_ddsc_cdrstream_min_xcdr_version(datapoints) ( datapoints.desc.n )
#define CU_TheoryDataPointsSlice_ddsc_cdrstream_min_xcdr_version(datapoints, index) ( datapoints.desc.p[index], datapoints.min_xcdrv.p[index] )
#define CU_TheoryDataPointsTypedef_ddsc_cdrstream_min_xcdr_version() { struct { size_t n; const dds_topic_descriptor_t * *p; } desc; struct { size_t n; uint16_t *p; } min_xcdrv; }
