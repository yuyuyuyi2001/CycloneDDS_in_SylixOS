/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to C Translator
  File name: CdrStreamSkipDefault.h
  Source: /home/wangkunlin/Desktop/cyclonedds/debug/bin/idl_analyze/CdrStreamSkipDefault.idl
  Cyclone DDS: V0.11.0

*****************************************************************/
#ifndef DDSC_CDRSTREAMSKIPDEFAULT_H_081D6F16D738E30B3C270C2870A30C80
#define DDSC_CDRSTREAMSKIPDEFAULT_H_081D6F16D738E30B3C270C2870A30C80

#include "dds/ddsc/dds_public_impl.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifndef DDS_SEQUENCE_STRING_DEFINED
#define DDS_SEQUENCE_STRING_DEFINED
typedef struct dds_sequence_string
{
  uint32_t _maximum;
  uint32_t _length;
  char **_buffer;
  bool _release;
} dds_sequence_string;

#define dds_sequence_string__alloc() \
((dds_sequence_string*) dds_alloc (sizeof (dds_sequence_string)));

#define dds_sequence_string_allocbuf(l) \
((char **) dds_alloc ((l) * sizeof (char*)))
#endif /* DDS_SEQUENCE_STRING_DEFINED */

typedef struct CdrStreamSkipDefault_t1_append
{
  int32_t s1;
  char * s2;
  dds_sequence_string s3;
} CdrStreamSkipDefault_t1_append;

typedef struct CdrStreamSkipDefault_t1_pub
{
  int32_t f1;
} CdrStreamSkipDefault_t1_pub;

extern const dds_topic_descriptor_t CdrStreamSkipDefault_t1_pub_desc;

#define CdrStreamSkipDefault_t1_pub__alloc() \
((CdrStreamSkipDefault_t1_pub*) dds_alloc (sizeof (CdrStreamSkipDefault_t1_pub)));

#define CdrStreamSkipDefault_t1_pub_free(d,o) \
dds_sample_free ((d), &CdrStreamSkipDefault_t1_pub_desc, (o))

typedef struct CdrStreamSkipDefault_t1_sub
{
  int32_t f1;
  struct CdrStreamSkipDefault_t1_append f2;
} CdrStreamSkipDefault_t1_sub;

extern const dds_topic_descriptor_t CdrStreamSkipDefault_t1_sub_desc;

#define CdrStreamSkipDefault_t1_sub__alloc() \
((CdrStreamSkipDefault_t1_sub*) dds_alloc (sizeof (CdrStreamSkipDefault_t1_sub)));

#define CdrStreamSkipDefault_t1_sub_free(d,o) \
dds_sample_free ((d), &CdrStreamSkipDefault_t1_sub_desc, (o))

typedef struct CdrStreamSkipDefault_t2_mutable
{
  int32_t s1;
  char * s2;
  uint64_t s3;
  int32_t * s4;
} CdrStreamSkipDefault_t2_mutable;

typedef struct CdrStreamSkipDefault_t2_pub
{
  int32_t f1;
} CdrStreamSkipDefault_t2_pub;

extern const dds_topic_descriptor_t CdrStreamSkipDefault_t2_pub_desc;

#define CdrStreamSkipDefault_t2_pub__alloc() \
((CdrStreamSkipDefault_t2_pub*) dds_alloc (sizeof (CdrStreamSkipDefault_t2_pub)));

#define CdrStreamSkipDefault_t2_pub_free(d,o) \
dds_sample_free ((d), &CdrStreamSkipDefault_t2_pub_desc, (o))

typedef struct CdrStreamSkipDefault_t2_sub
{
  int32_t f1;
  struct CdrStreamSkipDefault_t2_mutable f2;
  double f3;
} CdrStreamSkipDefault_t2_sub;

extern const dds_topic_descriptor_t CdrStreamSkipDefault_t2_sub_desc;

#define CdrStreamSkipDefault_t2_sub__alloc() \
((CdrStreamSkipDefault_t2_sub*) dds_alloc (sizeof (CdrStreamSkipDefault_t2_sub)));

#define CdrStreamSkipDefault_t2_sub_free(d,o) \
dds_sample_free ((d), &CdrStreamSkipDefault_t2_sub_desc, (o))

#ifndef DDS_SEQUENCE_LONG_DEFINED
#define DDS_SEQUENCE_LONG_DEFINED
typedef struct dds_sequence_long
{
  uint32_t _maximum;
  uint32_t _length;
  int32_t *_buffer;
  bool _release;
} dds_sequence_long;

#define dds_sequence_long__alloc() \
((dds_sequence_long*) dds_alloc (sizeof (dds_sequence_long)));

#define dds_sequence_long_allocbuf(l) \
((int32_t *) dds_alloc ((l) * sizeof (int32_t)))
#endif /* DDS_SEQUENCE_LONG_DEFINED */

typedef struct CdrStreamSkipDefault_t3_sub2
{
  char * s1;
  dds_sequence_long s2;
} CdrStreamSkipDefault_t3_sub2;

typedef struct CdrStreamSkipDefault_t3_sub1
{
  int32_t s1;
  struct CdrStreamSkipDefault_t3_sub2 s2;
} CdrStreamSkipDefault_t3_sub1;

typedef struct CdrStreamSkipDefault_t3_pub
{
  int32_t f1;
} CdrStreamSkipDefault_t3_pub;

extern const dds_topic_descriptor_t CdrStreamSkipDefault_t3_pub_desc;

#define CdrStreamSkipDefault_t3_pub__alloc() \
((CdrStreamSkipDefault_t3_pub*) dds_alloc (sizeof (CdrStreamSkipDefault_t3_pub)));

#define CdrStreamSkipDefault_t3_pub_free(d,o) \
dds_sample_free ((d), &CdrStreamSkipDefault_t3_pub_desc, (o))

typedef struct CdrStreamSkipDefault_t3_sub
{
  int32_t f1;
  struct CdrStreamSkipDefault_t3_sub1 f2;
  double f3;
  struct CdrStreamSkipDefault_t3_sub2 f4;
} CdrStreamSkipDefault_t3_sub;

extern const dds_topic_descriptor_t CdrStreamSkipDefault_t3_sub_desc;

#define CdrStreamSkipDefault_t3_sub__alloc() \
((CdrStreamSkipDefault_t3_sub*) dds_alloc (sizeof (CdrStreamSkipDefault_t3_sub)));

#define CdrStreamSkipDefault_t3_sub_free(d,o) \
dds_sample_free ((d), &CdrStreamSkipDefault_t3_sub_desc, (o))

typedef enum CdrStreamSkipDefault_t4_enum
{
  CdrStreamSkipDefault_E4_1,
  CdrStreamSkipDefault_E4_2
} CdrStreamSkipDefault_t4_enum;

#define CdrStreamSkipDefault_t4_enum__alloc() \
((CdrStreamSkipDefault_t4_enum*) dds_alloc (sizeof (CdrStreamSkipDefault_t4_enum)));

#ifndef DDS_SEQUENCE_LONG_DEFINED
#define DDS_SEQUENCE_LONG_DEFINED
typedef struct dds_sequence_long
{
  uint32_t _maximum;
  uint32_t _length;
  int32_t *_buffer;
  bool _release;
} dds_sequence_long;

#define dds_sequence_long__alloc() \
((dds_sequence_long*) dds_alloc (sizeof (dds_sequence_long)));

#define dds_sequence_long_allocbuf(l) \
((int32_t *) dds_alloc ((l) * sizeof (int32_t)))
#endif /* DDS_SEQUENCE_LONG_DEFINED */

typedef struct CdrStreamSkipDefault_t4_sub2
{
  CdrStreamSkipDefault_t4_enum s1;
  dds_sequence_long * s2;
} CdrStreamSkipDefault_t4_sub2;

typedef struct CdrStreamSkipDefault_t4_sub1
{
  int32_t s1;
  struct CdrStreamSkipDefault_t4_sub2 s2;
} CdrStreamSkipDefault_t4_sub1;

typedef struct CdrStreamSkipDefault_t4_pub
{
  int32_t f1;
} CdrStreamSkipDefault_t4_pub;

extern const dds_topic_descriptor_t CdrStreamSkipDefault_t4_pub_desc;

#define CdrStreamSkipDefault_t4_pub__alloc() \
((CdrStreamSkipDefault_t4_pub*) dds_alloc (sizeof (CdrStreamSkipDefault_t4_pub)));

#define CdrStreamSkipDefault_t4_pub_free(d,o) \
dds_sample_free ((d), &CdrStreamSkipDefault_t4_pub_desc, (o))

typedef struct CdrStreamSkipDefault_t4_sub
{
  int32_t f1;
  struct CdrStreamSkipDefault_t4_sub1 f2;
  double f3;
  struct CdrStreamSkipDefault_t4_sub2 f4;
} CdrStreamSkipDefault_t4_sub;

extern const dds_topic_descriptor_t CdrStreamSkipDefault_t4_sub_desc;

#define CdrStreamSkipDefault_t4_sub__alloc() \
((CdrStreamSkipDefault_t4_sub*) dds_alloc (sizeof (CdrStreamSkipDefault_t4_sub)));

#define CdrStreamSkipDefault_t4_sub_free(d,o) \
dds_sample_free ((d), &CdrStreamSkipDefault_t4_sub_desc, (o))

typedef struct CdrStreamSkipDefault_t5_pub1
{
  int32_t s1;
} CdrStreamSkipDefault_t5_pub1;

typedef struct CdrStreamSkipDefault_t5_pub
{
  int32_t f1;
  struct CdrStreamSkipDefault_t5_pub1 f2;
} CdrStreamSkipDefault_t5_pub;

extern const dds_topic_descriptor_t CdrStreamSkipDefault_t5_pub_desc;

#define CdrStreamSkipDefault_t5_pub__alloc() \
((CdrStreamSkipDefault_t5_pub*) dds_alloc (sizeof (CdrStreamSkipDefault_t5_pub)));

#define CdrStreamSkipDefault_t5_pub_free(d,o) \
dds_sample_free ((d), &CdrStreamSkipDefault_t5_pub_desc, (o))

#ifndef DDS_SEQUENCE_LONG_DEFINED
#define DDS_SEQUENCE_LONG_DEFINED
typedef struct dds_sequence_long
{
  uint32_t _maximum;
  uint32_t _length;
  int32_t *_buffer;
  bool _release;
} dds_sequence_long;

#define dds_sequence_long__alloc() \
((dds_sequence_long*) dds_alloc (sizeof (dds_sequence_long)));

#define dds_sequence_long_allocbuf(l) \
((int32_t *) dds_alloc ((l) * sizeof (int32_t)))
#endif /* DDS_SEQUENCE_LONG_DEFINED */

typedef struct CdrStreamSkipDefault_t5_sub2
{
  int32_t s1;
  dds_sequence_long s2;
} CdrStreamSkipDefault_t5_sub2;

typedef struct CdrStreamSkipDefault_t5_sub1
{
  int32_t s1;
  struct CdrStreamSkipDefault_t5_sub2 s2;
} CdrStreamSkipDefault_t5_sub1;

typedef struct CdrStreamSkipDefault_t5_sub
{
  int32_t f1;
  struct CdrStreamSkipDefault_t5_sub1 f2;
} CdrStreamSkipDefault_t5_sub;

extern const dds_topic_descriptor_t CdrStreamSkipDefault_t5_sub_desc;

#define CdrStreamSkipDefault_t5_sub__alloc() \
((CdrStreamSkipDefault_t5_sub*) dds_alloc (sizeof (CdrStreamSkipDefault_t5_sub)));

#define CdrStreamSkipDefault_t5_sub_free(d,o) \
dds_sample_free ((d), &CdrStreamSkipDefault_t5_sub_desc, (o))

#ifdef __cplusplus
}
#endif

#endif /* DDSC_CDRSTREAMSKIPDEFAULT_H_081D6F16D738E30B3C270C2870A30C80 */
