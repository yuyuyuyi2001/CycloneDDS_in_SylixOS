/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to C Translator
  File name: XSpace.h
  Source: /home/wangkunlin/Desktop/cyclonedds/debug/bin/idl_analyze/XSpace.idl
  Cyclone DDS: V0.11.0

*****************************************************************/
#ifndef DDSC_XSPACE_H_70C0991727E364E06A62F5E5D9518F9D
#define DDSC_XSPACE_H_70C0991727E364E06A62F5E5D9518F9D

#include "dds/ddsc/dds_public_impl.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef uint16_t XSpace_my_bitmask;
#define XSpace_flag0 (1 << 0)
#define XSpace_flag1 (1 << 1)
typedef struct XSpace_XType1
{
  int32_t long_1;
  int32_t long_2;
  XSpace_my_bitmask bm_3;
} XSpace_XType1;

extern const dds_topic_descriptor_t XSpace_XType1_desc;

#define XSpace_XType1__alloc() \
((XSpace_XType1*) dds_alloc (sizeof (XSpace_XType1)));

#define XSpace_XType1_free(d,o) \
dds_sample_free ((d), &XSpace_XType1_desc, (o))

typedef struct XSpace_XType1a
{
  int32_t long_1;
  int32_t long_2;
  uint16_t bm_3;
} XSpace_XType1a;

extern const dds_topic_descriptor_t XSpace_XType1a_desc;

#define XSpace_XType1a__alloc() \
((XSpace_XType1a*) dds_alloc (sizeof (XSpace_XType1a)));

#define XSpace_XType1a_free(d,o) \
dds_sample_free ((d), &XSpace_XType1a_desc, (o))

typedef struct XSpace_XType2
{
  int32_t long_1;
  int32_t long_2;
} XSpace_XType2;

extern const dds_topic_descriptor_t XSpace_XType2_desc;

#define XSpace_XType2__alloc() \
((XSpace_XType2*) dds_alloc (sizeof (XSpace_XType2)));

#define XSpace_XType2_free(d,o) \
dds_sample_free ((d), &XSpace_XType2_desc, (o))

typedef struct XSpace_XType2a
{
  int32_t long_1;
  int32_t long_2;
  int32_t long_3;
} XSpace_XType2a;

extern const dds_topic_descriptor_t XSpace_XType2a_desc;

#define XSpace_XType2a__alloc() \
((XSpace_XType2a*) dds_alloc (sizeof (XSpace_XType2a)));

#define XSpace_XType2a_free(d,o) \
dds_sample_free ((d), &XSpace_XType2a_desc, (o))

typedef struct XSpace_XType3_1
{
  int32_t long_4;
  int32_t long_5;
} XSpace_XType3_1;

extern const dds_topic_descriptor_t XSpace_XType3_1_desc;

#define XSpace_XType3_1__alloc() \
((XSpace_XType3_1*) dds_alloc (sizeof (XSpace_XType3_1)));

#define XSpace_XType3_1_free(d,o) \
dds_sample_free ((d), &XSpace_XType3_1_desc, (o))

typedef struct XSpace_XType3_1a
{
  int32_t long_4;
} XSpace_XType3_1a;

extern const dds_topic_descriptor_t XSpace_XType3_1a_desc;

#define XSpace_XType3_1a__alloc() \
((XSpace_XType3_1a*) dds_alloc (sizeof (XSpace_XType3_1a)));

#define XSpace_XType3_1a_free(d,o) \
dds_sample_free ((d), &XSpace_XType3_1a_desc, (o))

typedef struct XSpace_XType3
{
  int32_t long_2;
  struct XSpace_XType3_1 struct_3;
} XSpace_XType3;

extern const dds_topic_descriptor_t XSpace_XType3_desc;

#define XSpace_XType3__alloc() \
((XSpace_XType3*) dds_alloc (sizeof (XSpace_XType3)));

#define XSpace_XType3_free(d,o) \
dds_sample_free ((d), &XSpace_XType3_desc, (o))

typedef struct XSpace_XType3a
{
  int32_t long_1;
  int32_t long_2;
  struct XSpace_XType3_1a struct_3;
} XSpace_XType3a;

extern const dds_topic_descriptor_t XSpace_XType3a_desc;

#define XSpace_XType3a__alloc() \
((XSpace_XType3a*) dds_alloc (sizeof (XSpace_XType3a)));

#define XSpace_XType3a_free(d,o) \
dds_sample_free ((d), &XSpace_XType3a_desc, (o))

#ifndef DDS_SEQUENCE_UINT32_DEFINED
#define DDS_SEQUENCE_UINT32_DEFINED
typedef struct dds_sequence_uint32
{
  uint32_t _maximum;
  uint32_t _length;
  uint32_t *_buffer;
  bool _release;
} dds_sequence_uint32;

#define dds_sequence_uint32__alloc() \
((dds_sequence_uint32*) dds_alloc (sizeof (dds_sequence_uint32)));

#define dds_sequence_uint32_allocbuf(l) \
((uint32_t *) dds_alloc ((l) * sizeof (uint32_t)))
#endif /* DDS_SEQUENCE_UINT32_DEFINED */

#ifndef DDS_SEQUENCE_UINT32_DEFINED
#define DDS_SEQUENCE_UINT32_DEFINED
typedef struct dds_sequence_uint32
{
  uint32_t _maximum;
  uint32_t _length;
  uint32_t *_buffer;
  bool _release;
} dds_sequence_uint32;

#define dds_sequence_uint32__alloc() \
((dds_sequence_uint32*) dds_alloc (sizeof (dds_sequence_uint32)));

#define dds_sequence_uint32_allocbuf(l) \
((uint32_t *) dds_alloc ((l) * sizeof (uint32_t)))
#endif /* DDS_SEQUENCE_UINT32_DEFINED */

typedef struct XSpace_XType4
{
  dds_sequence_uint32 seq_1;
  dds_sequence_uint32 seq_2;
} XSpace_XType4;

extern const dds_topic_descriptor_t XSpace_XType4_desc;

#define XSpace_XType4__alloc() \
((XSpace_XType4*) dds_alloc (sizeof (XSpace_XType4)));

#define XSpace_XType4_free(d,o) \
dds_sample_free ((d), &XSpace_XType4_desc, (o))

#ifndef DDS_SEQUENCE_UINT32_DEFINED
#define DDS_SEQUENCE_UINT32_DEFINED
typedef struct dds_sequence_uint32
{
  uint32_t _maximum;
  uint32_t _length;
  uint32_t *_buffer;
  bool _release;
} dds_sequence_uint32;

#define dds_sequence_uint32__alloc() \
((dds_sequence_uint32*) dds_alloc (sizeof (dds_sequence_uint32)));

#define dds_sequence_uint32_allocbuf(l) \
((uint32_t *) dds_alloc ((l) * sizeof (uint32_t)))
#endif /* DDS_SEQUENCE_UINT32_DEFINED */

#ifndef DDS_SEQUENCE_UINT32_DEFINED
#define DDS_SEQUENCE_UINT32_DEFINED
typedef struct dds_sequence_uint32
{
  uint32_t _maximum;
  uint32_t _length;
  uint32_t *_buffer;
  bool _release;
} dds_sequence_uint32;

#define dds_sequence_uint32__alloc() \
((dds_sequence_uint32*) dds_alloc (sizeof (dds_sequence_uint32)));

#define dds_sequence_uint32_allocbuf(l) \
((uint32_t *) dds_alloc ((l) * sizeof (uint32_t)))
#endif /* DDS_SEQUENCE_UINT32_DEFINED */

typedef struct XSpace_XType4a
{
  dds_sequence_uint32 seq_1;
  dds_sequence_uint32 seq_2;
} XSpace_XType4a;

extern const dds_topic_descriptor_t XSpace_XType4a_desc;

#define XSpace_XType4a__alloc() \
((XSpace_XType4a*) dds_alloc (sizeof (XSpace_XType4a)));

#define XSpace_XType4a_free(d,o) \
dds_sample_free ((d), &XSpace_XType4a_desc, (o))

typedef struct XSpace_XType5
{
  char * str_1;
  char str_2[11];
} XSpace_XType5;

extern const dds_topic_descriptor_t XSpace_XType5_desc;

#define XSpace_XType5__alloc() \
((XSpace_XType5*) dds_alloc (sizeof (XSpace_XType5)));

#define XSpace_XType5_free(d,o) \
dds_sample_free ((d), &XSpace_XType5_desc, (o))

typedef struct XSpace_XType5a
{
  char str_1[1000];
  char str_2[6];
} XSpace_XType5a;

extern const dds_topic_descriptor_t XSpace_XType5a_desc;

#define XSpace_XType5a__alloc() \
((XSpace_XType5a*) dds_alloc (sizeof (XSpace_XType5a)));

#define XSpace_XType5a_free(d,o) \
dds_sample_free ((d), &XSpace_XType5a_desc, (o))

typedef struct XSpace_seql
{
  uint32_t _maximum;
  uint32_t _length;
  int32_t *_buffer;
  bool _release;
} XSpace_seql;

#define XSpace_seql__alloc() \
((XSpace_seql*) dds_alloc (sizeof (XSpace_seql)));

#define XSpace_seql_allocbuf(l) \
((int32_t *) dds_alloc ((l) * sizeof (int32_t)))
typedef enum XSpace_e
{
  XSpace_E1,
  XSpace_E2
} XSpace_e;

#define XSpace_e__alloc() \
((XSpace_e*) dds_alloc (sizeof (XSpace_e)));

typedef uint32_t XSpace_bm;
#define XSpace_BM1 (1lu << 0)
#define XSpace_BM2 (1lu << 1)
typedef struct XSpace_to_toplevel
{
  XSpace_seql f1;
  XSpace_e f2;
  XSpace_bm f3;
} XSpace_to_toplevel;

extern const dds_topic_descriptor_t XSpace_to_toplevel_desc;

#define XSpace_to_toplevel__alloc() \
((XSpace_to_toplevel*) dds_alloc (sizeof (XSpace_to_toplevel)));

#define XSpace_to_toplevel_free(d,o) \
dds_sample_free ((d), &XSpace_to_toplevel_desc, (o))

typedef struct XSpace_to_base
{
  int32_t b1;
} XSpace_to_base;

typedef struct XSpace_u
{
  int32_t _d;
  union
  {
    int32_t u1;
  } _u;
} XSpace_u;

typedef struct XSpace_to_inherit
{
  struct XSpace_to_base parent;
  struct XSpace_u f1;
} XSpace_to_inherit;

extern const dds_topic_descriptor_t XSpace_to_inherit_desc;

#define XSpace_to_inherit__alloc() \
((XSpace_to_inherit*) dds_alloc (sizeof (XSpace_to_inherit)));

#define XSpace_to_inherit_free(d,o) \
dds_sample_free ((d), &XSpace_to_inherit_desc, (o))

typedef struct XSpace_to_uniondisc
{
  int32_t _d;
  union
  {
    int32_t u1;
  } _u;
} XSpace_to_uniondisc;

extern const dds_topic_descriptor_t XSpace_to_uniondisc_desc;

#define XSpace_to_uniondisc__alloc() \
((XSpace_to_uniondisc*) dds_alloc (sizeof (XSpace_to_uniondisc)));

#define XSpace_to_uniondisc_free(d,o) \
dds_sample_free ((d), &XSpace_to_uniondisc_desc, (o))

typedef struct XSpace_dep_test_nested
{
  int32_t n1;
  int32_t n2;
} XSpace_dep_test_nested;

typedef struct XSpace_dep_test
{
  struct XSpace_dep_test_nested f1;
} XSpace_dep_test;

extern const dds_topic_descriptor_t XSpace_dep_test_desc;

#define XSpace_dep_test__alloc() \
((XSpace_dep_test*) dds_alloc (sizeof (XSpace_dep_test)));

#define XSpace_dep_test_free(d,o) \
dds_sample_free ((d), &XSpace_dep_test_desc, (o))

typedef struct XSpace_to_unionmembers
{
  int32_t _d;
  union
  {
    int32_t u1;
    int16_t u2;
  } _u;
} XSpace_to_unionmembers;

extern const dds_topic_descriptor_t XSpace_to_unionmembers_desc;

#define XSpace_to_unionmembers__alloc() \
((XSpace_to_unionmembers*) dds_alloc (sizeof (XSpace_to_unionmembers)));

#define XSpace_to_unionmembers_free(d,o) \
dds_sample_free ((d), &XSpace_to_unionmembers_desc, (o))

typedef uint8_t XSpace_td_byte[1000000000];

#define XSpace_td_byte__alloc() \
((XSpace_td_byte*) dds_alloc (sizeof (XSpace_td_byte)));

typedef XSpace_td_byte XSpace_tdd_byte;

#define XSpace_tdd_byte__alloc() \
((XSpace_tdd_byte*) dds_alloc (sizeof (XSpace_tdd_byte)));

typedef struct XSpace_to_arraybound
{
  XSpace_tdd_byte f1[1];
} XSpace_to_arraybound;

extern const dds_topic_descriptor_t XSpace_to_arraybound_desc;

#define XSpace_to_arraybound__alloc() \
((XSpace_to_arraybound*) dds_alloc (sizeof (XSpace_to_arraybound)));

#define XSpace_to_arraybound_free(d,o) \
dds_sample_free ((d), &XSpace_to_arraybound_desc, (o))

#ifdef __cplusplus
}
#endif

#endif /* DDSC_XSPACE_H_70C0991727E364E06A62F5E5D9518F9D */
